package org.scripps.branch.config;

import java.util.Properties;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;
import org.springframework.util.Assert;
import org.springframework.web.multipart.support.StandardServletMultipartResolver;
import org.springframework.web.servlet.HandlerMapping;
import org.springframework.web.servlet.ViewResolver;
import org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
import org.springframework.web.servlet.handler.SimpleMappingExceptionResolver;
import org.springframework.web.servlet.handler.SimpleUrlHandlerMapping;
import org.springframework.web.servlet.resource.AppCacheManifestTransformer;
import org.springframework.web.servlet.resource.VersionResourceResolver;
import org.springframework.web.servlet.view.InternalResourceViewResolver;
import org.springframework.web.servlet.view.JstlView;

@Configuration
@EnableWebMvc
@ComponentScan(basePackages = { "org.scripps.branch.controller" })
public class WebApplicationContext extends WebMvcConfigurationSupport {

	private static final String VIEW_RESOLVER_PREFIX = "/WEB-INF/Views/";
	private static final String VIEW_RESOLVER_SUFFIX = ".jsp";
	
	@Autowired
	Environment env;
	
	@Value("${app.version}")
	private String appVersion;
	
	@Override
	public HandlerMapping resourceHandlerMapping() {
	    SimpleUrlHandlerMapping handlerMapping = (SimpleUrlHandlerMapping) super.resourceHandlerMapping();
	    handlerMapping.setInterceptors(this.getInterceptors());
	    return handlerMapping;
	}

	@Override
	public void addResourceHandlers(ResourceHandlerRegistry registry) {
		boolean devMode = this.env.acceptsProfiles("dev");
		Integer cachePeriod = devMode ? 0 : null;
		boolean useResourceCache = !devMode;
		String version = this.appVersion;
		AppCacheManifestTransformer appCacheTransformer = new AppCacheManifestTransformer();
		VersionResourceResolver versionResolver = new VersionResourceResolver()
		.addFixedVersionStrategy(version, "/**/*.js")
		.addContentVersionStrategy("/**");
		
		registry.addResourceHandler("classpath:/static/**")
				.addResourceLocations("/static/**")
				.setCachePeriod(cachePeriod)
		.resourceChain(useResourceCache)
		.addResolver(versionResolver)
		.addTransformer(appCacheTransformer);
	}

	@Override
	public void configureDefaultServletHandling(
			DefaultServletHandlerConfigurer configurer) {
		configurer.enable();
	}

	@Bean
	public SimpleMappingExceptionResolver exceptionResolver() {
		SimpleMappingExceptionResolver exceptionResolver = new SimpleMappingExceptionResolver();

		Properties exceptionMappings = new Properties();

		exceptionMappings.put("java.lang.Exception", "error/500_error");
		exceptionMappings.put("java.lang.RuntimeException", "error/500_error");

		exceptionResolver.setExceptionMappings(exceptionMappings);

		Properties statusCodes = new Properties();

		statusCodes.put("error/404_error", "404");
		statusCodes.put("error/500_error", "500");
		statusCodes.put("error/400_error", "400");

		exceptionResolver.setStatusCodes(statusCodes);

		return exceptionResolver;
	}

	@Bean
	public StandardServletMultipartResolver multipartResolver() {
		return new StandardServletMultipartResolver();
	}

	@Bean
	public ViewResolver viewResolver() {
		InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();

		viewResolver.setViewClass(JstlView.class);
		viewResolver.setPrefix(VIEW_RESOLVER_PREFIX);
		viewResolver.setSuffix(VIEW_RESOLVER_SUFFIX);

		return viewResolver;
	}

}